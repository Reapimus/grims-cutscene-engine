{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grim's Cutscene Engine is a Roblox system created to allow developers to easily create proper cutscenes for their games that include the animation of instances, characters, etc, the playing of sounds and other actions, and support for subtitles. If you find anything missing from this documentation or that is incorrect, Open an issue on GitHub ! Info This documentation was made with the assumption you have some familiarity with Lua programming. If you're new to Lua, you should read some resources such as Programming in Lua by Roberto lerusalimschy and the documentation for Lua 5.0.","title":"Home"},{"location":"api-reference/","text":"Classes \u00b6 CutsceneHandler \u00b6 CutsceneEngine . new ( cutsceneData ) -> CutsceneHandler The main class that handles all cutscene data and how it is played. CutsceneHandler.Playing \u00b6 A value that can be used to determine whether or not the cutscene is playing. CutsceneHandler.Paused \u00b6 A value that can be used to determine whether or not the cutscene is paused. CutsceneHandler:Play() \u00b6 CutsceneHandler : Play () A method to play the cutscene. CutsceneHandler:Stop() \u00b6 CutsceneHandler : Stop () A method to stop the cutscene from playing. CutsceneHandler:Pause() \u00b6 CutsceneHandler : Pause () A method to pause the cutscene if it was playing. CutsceneHandler:Resume() \u00b6 CutsceneHandler : Resume () A method to resume playback of the cutscene if it was paused.","title":"API Reference"},{"location":"api-reference/#classes","text":"","title":"Classes"},{"location":"api-reference/#cutscenehandler","text":"CutsceneEngine . new ( cutsceneData ) -> CutsceneHandler The main class that handles all cutscene data and how it is played.","title":"CutsceneHandler"},{"location":"api-reference/#cutscenehandlerplaying","text":"A value that can be used to determine whether or not the cutscene is playing.","title":"CutsceneHandler.Playing"},{"location":"api-reference/#cutscenehandlerpaused","text":"A value that can be used to determine whether or not the cutscene is paused.","title":"CutsceneHandler.Paused"},{"location":"api-reference/#cutscenehandlerplay","text":"CutsceneHandler : Play () A method to play the cutscene.","title":"CutsceneHandler:Play()"},{"location":"api-reference/#cutscenehandlerstop","text":"CutsceneHandler : Stop () A method to stop the cutscene from playing.","title":"CutsceneHandler:Stop()"},{"location":"api-reference/#cutscenehandlerpause","text":"CutsceneHandler : Pause () A method to pause the cutscene if it was playing.","title":"CutsceneHandler:Pause()"},{"location":"api-reference/#cutscenehandlerresume","text":"CutsceneHandler : Resume () A method to resume playback of the cutscene if it was paused.","title":"CutsceneHandler:Resume()"},{"location":"guide/actions/","text":"In Grim's Cutscene Engine, an Action is a special type of keyframe that can execute a function at the specified time in the cutscene, with the specified options, and the specified target (or no target, if the action supports it) An action can be added to the cutscene by right-clicking anywhere within the timeline and clicking on any of the \"Add ___\" options. Creating your own Actions \u00b6 Want to create your own actions to use with the system? Simply create a ModuleScript in CutsceneEngine.Actions with the desired name of your action, that returns a function that will be fired when the action is needed, with the only argument being provided being information about the action. The following is what the action's information looks like when this function is fired: { Target ; -- If this action supports specifying a target instance, this will be present ...; -- Any options/arguments provided to the action will be present as keys inside the table directly. } After that has been created, you then need to create a ModuleScript in CutsceneEngine.ActionConfig with the same name as you used previously, that returns a table containing information about how the action should be treated. This is what the information about how an action should be treated should look like: { Settings = { ...; -- Any options you want should be specified here, with their names as their indexes and defaults as their values. }; HasTarget = true or false ; -- This determines whether or not this action requires a target instance (the target instance is determined by the editor as whatever instance is selected when the action is added). }","title":"Actions"},{"location":"guide/actions/#creating-your-own-actions","text":"Want to create your own actions to use with the system? Simply create a ModuleScript in CutsceneEngine.Actions with the desired name of your action, that returns a function that will be fired when the action is needed, with the only argument being provided being information about the action. The following is what the action's information looks like when this function is fired: { Target ; -- If this action supports specifying a target instance, this will be present ...; -- Any options/arguments provided to the action will be present as keys inside the table directly. } After that has been created, you then need to create a ModuleScript in CutsceneEngine.ActionConfig with the same name as you used previously, that returns a table containing information about how the action should be treated. This is what the information about how an action should be treated should look like: { Settings = { ...; -- Any options you want should be specified here, with their names as their indexes and defaults as their values. }; HasTarget = true or false ; -- This determines whether or not this action requires a target instance (the target instance is determined by the editor as whatever instance is selected when the action is added). }","title":"Creating your own Actions"},{"location":"guide/installation/","text":"Grim's Cutscene Engine has one supported way to get started with. Method 1: Install the Plugin (via Roblox Studio) \u00b6 Navigate to the plugin's page on the website Click the install button","title":"Installation"},{"location":"guide/installation/#method-1-install-the-plugin-via-roblox-studio","text":"Navigate to the plugin's page on the website Click the install button","title":"Method 1: Install the Plugin (via Roblox Studio)"},{"location":"guide/interface/","text":"The interface of Grim's Cutscene Engine's editor is heavily inspired by/based off of another Roblox plugin which came close to the type of system I was looking for, which said plugin is TweenSequence Editor . Getting Started \u00b6 When you first open the editor in a place file where the engine is not present or the editor has never been used before, it will prompt you to create a new cutscene before you can do anything else. Any cutscenes saved in ReplicatedStorage.ExportedCutscenes are able to be edited by the engine. Navigating the Editor \u00b6 The Topbar \u00b6 The buttons across the top of the main editor window are as follows, from left to right: Save - Clicking this will save any changes you have made to the cutscene, and automatically select the exported cutscene in the explorer. Preview - Clicking this will preview the currently loaded cutscene in the editor. Reload - Clicking this will reload the current cutscene from its last saved information. Current Cutscene - Clicking this will bring up a list of cutscenes you can load. Rename - Clicking this will prompt you to rename the cutscene you have currently loaded. Delete - Clicking this will delete the cutscene you currently have loaded. EasingStyle - If a keyframe is selected, this will let you choose the EasingStyle for the keyframe. EasingDirection - If a keyframe is selected, this will let you choose the EasingDirection for the keyframe. Capture Camera CFrame - Clicking this will capture the camera's current CFrame as a keyframe for the camera, this is the only way to animate the camera as it would likely be really difficult to use if the camera was always being tracked like other properties. Setup Joints - If you have a Motor6D selected, clicking this will automatically add their C0 and C1 as properties that are being tracked for this cutscene. The Explorer \u00b6 To the left side of the editor window is the Explorer. This shows all instances that have properties that are being tracked. Scroll up and down when the mouse is within this widget to scroll through the displayed instances and properties, if you can't see them all at once. To add a new tracked property to an instance , click the plus button to the right of the instance's name in the explorer. You will then be prompted to enter the name of a property to track. When the property is added its initial value is set to whatever its value currently is in studio. While the editor is active, it will listen for changes to tracked properties. Any changes will either add a new keyframe or modify a keyframe if one already exists for the property at the playhead's current position. To delete a tracked property , click the trash button to the right of the property's name in the explorer. This will also erase all of the properties keyframes. The Timeline \u00b6 To the right side of the editor window, is the Timeline. this shows all the keyframes and actions in the cutscene, and can be used to view them and move them around. Left click or drag the mouse to move the playhead\u2019s position. Scroll up and down when the mouse is inside the Timeline to zoom in and out. Drag with the middle mouse button to move left and right. As you move the playhead, the animation will adjust to appear as how it would look at that moment in time when the cutscene is playing in-game. Manipulating a Keyframe \u00b6 Select a keyframe by clicking on it. Move a keyframe by dragging it with the mouse. You can\u2019t move a keyframe onto another keyframe, and you can\u2019t move keyframes with a time of 0. Copy and paste a keyframe\u2019s data, or delete a keyframe, by right clicking on a keyframe and selecting the appropriate action. Caution When using a cutscene in-game, make sure that everything the cutscene uses is exactly where it should be , otherwise that cutscene will not work!","title":"Interface"},{"location":"guide/interface/#getting-started","text":"When you first open the editor in a place file where the engine is not present or the editor has never been used before, it will prompt you to create a new cutscene before you can do anything else. Any cutscenes saved in ReplicatedStorage.ExportedCutscenes are able to be edited by the engine.","title":"Getting Started"},{"location":"guide/interface/#navigating-the-editor","text":"","title":"Navigating the Editor"},{"location":"guide/interface/#the-topbar","text":"The buttons across the top of the main editor window are as follows, from left to right: Save - Clicking this will save any changes you have made to the cutscene, and automatically select the exported cutscene in the explorer. Preview - Clicking this will preview the currently loaded cutscene in the editor. Reload - Clicking this will reload the current cutscene from its last saved information. Current Cutscene - Clicking this will bring up a list of cutscenes you can load. Rename - Clicking this will prompt you to rename the cutscene you have currently loaded. Delete - Clicking this will delete the cutscene you currently have loaded. EasingStyle - If a keyframe is selected, this will let you choose the EasingStyle for the keyframe. EasingDirection - If a keyframe is selected, this will let you choose the EasingDirection for the keyframe. Capture Camera CFrame - Clicking this will capture the camera's current CFrame as a keyframe for the camera, this is the only way to animate the camera as it would likely be really difficult to use if the camera was always being tracked like other properties. Setup Joints - If you have a Motor6D selected, clicking this will automatically add their C0 and C1 as properties that are being tracked for this cutscene.","title":"The Topbar"},{"location":"guide/interface/#the-explorer","text":"To the left side of the editor window is the Explorer. This shows all instances that have properties that are being tracked. Scroll up and down when the mouse is within this widget to scroll through the displayed instances and properties, if you can't see them all at once. To add a new tracked property to an instance , click the plus button to the right of the instance's name in the explorer. You will then be prompted to enter the name of a property to track. When the property is added its initial value is set to whatever its value currently is in studio. While the editor is active, it will listen for changes to tracked properties. Any changes will either add a new keyframe or modify a keyframe if one already exists for the property at the playhead's current position. To delete a tracked property , click the trash button to the right of the property's name in the explorer. This will also erase all of the properties keyframes.","title":"The Explorer"},{"location":"guide/interface/#the-timeline","text":"To the right side of the editor window, is the Timeline. this shows all the keyframes and actions in the cutscene, and can be used to view them and move them around. Left click or drag the mouse to move the playhead\u2019s position. Scroll up and down when the mouse is inside the Timeline to zoom in and out. Drag with the middle mouse button to move left and right. As you move the playhead, the animation will adjust to appear as how it would look at that moment in time when the cutscene is playing in-game.","title":"The Timeline"},{"location":"guide/interface/#manipulating-a-keyframe","text":"Select a keyframe by clicking on it. Move a keyframe by dragging it with the mouse. You can\u2019t move a keyframe onto another keyframe, and you can\u2019t move keyframes with a time of 0. Copy and paste a keyframe\u2019s data, or delete a keyframe, by right clicking on a keyframe and selecting the appropriate action. Caution When using a cutscene in-game, make sure that everything the cutscene uses is exactly where it should be , otherwise that cutscene will not work!","title":"Manipulating a Keyframe"},{"location":"guide/subtitles/","text":"In Grim's Cutscene Engine, Subtitles are defined for a cutscene by specifying in the cutscene's data the Subtitles index as either a ModuleScript that returns subtitle information or a table that contains the subtitle information. Subtitles do support rich text and basic markdown (italics, bold, underline, and strike-through to be precise) Subtitle Data Structure \u00b6 A subtitle's data structure is specified as an array of dictionaries that contain information about the subtitles at a certain point in the cutscene, the start and end times of a subtitle are specified in seconds, and no two subtitles can have overlapping time ranges (if this is the case and two or more do overlap, whichever one is the first in the array is prioritized). A subtitle's data structure could look like this: { { StartTime = 0 ; EndTime = 3 ; Text = \"This is a subtitle at the *start* of the cutscene.\" ; }; { StartTime = 3 ; EndTime = 5 ; Text = \"And ***this*** is a subtitle at __3 seconds__ into the cutscene and ending 5 seconds into the cutscene.\" ; }; }","title":"Subtitles"},{"location":"guide/subtitles/#subtitle-data-structure","text":"A subtitle's data structure is specified as an array of dictionaries that contain information about the subtitles at a certain point in the cutscene, the start and end times of a subtitle are specified in seconds, and no two subtitles can have overlapping time ranges (if this is the case and two or more do overlap, whichever one is the first in the array is prioritized). A subtitle's data structure could look like this: { { StartTime = 0 ; EndTime = 3 ; Text = \"This is a subtitle at the *start* of the cutscene.\" ; }; { StartTime = 3 ; EndTime = 5 ; Text = \"And ***this*** is a subtitle at __3 seconds__ into the cutscene and ending 5 seconds into the cutscene.\" ; }; }","title":"Subtitle Data Structure"}]}